# -*- coding: utf-8 -*-
"""Cópia de dados_acidentes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QPQiyYVOlDbo8vwZ8bYKMafM39dGUvfB
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Dados fictícios de acidentes
dados_acidentes = [
    {"ID": 1, "Data": "2024-12-15", "Horario": "08:30", "DiaSemana": "Segunda-feira", "Bairro": "Centro", "Causa": "Alta Velocidade", "Gravidade": "Leve", "NumVeiculos": 2, "Feridos": 1, "Fatais": 0, "CondicoesClimaticas": "Ensolarado"},
    {"ID": 2, "Data": "2024-12-16", "Horario": "19:45", "DiaSemana": "Terça-feira", "Bairro": "Vila Nova", "Causa": "Direção Distraída", "Gravidade": "Grave", "NumVeiculos": 3, "Feridos": 4, "Fatais": 1, "CondicoesClimaticas": "Chuva"},
    {"ID": 3, "Data": "2024-12-17", "Horario": "12:15", "DiaSemana": "Quarta-feira", "Bairro": "Industrial", "Causa": "Avanço de Sinal Vermelho", "Gravidade": "Leve", "NumVeiculos": 2, "Feridos": 1, "Fatais": 0, "CondicoesClimaticas": "Nublado"},
    {"ID": 4, "Data": "2024-12-18", "Horario": "23:50", "DiaSemana": "Quinta-feira", "Bairro": "Jardim das Flores", "Causa": "Direção Sob Efeito de Álcool", "Gravidade": "Grave", "NumVeiculos": 1, "Feridos": 2, "Fatais": 1, "CondicoesClimaticas": "Ensolarado"},
    {"ID": 5, "Data": "2024-12-19", "Horario": "14:20", "DiaSemana": "Sexta-feira", "Bairro": "Centro", "Causa": "Alta Velocidade", "Gravidade": "Moderada", "NumVeiculos": 2, "Feridos": 3, "Fatais": 0, "CondicoesClimaticas": "Nublado"},
    {"ID": 6, "Data": "2024-12-20", "Horario": "06:45", "DiaSemana": "Sábado", "Bairro": "Morumbi", "Causa": "Falha Mecânica", "Gravidade": "Leve", "NumVeiculos": 1, "Feridos": 0, "Fatais": 0, "CondicoesClimaticas": "Nevoeiro"},
    {"ID": 7, "Data": "2024-12-20", "Horario": "18:30", "DiaSemana": "Sábado", "Bairro": "Vila Nova", "Causa": "Ultrapassagem Perigosa", "Gravidade": "Grave", "NumVeiculos": 3, "Feridos": 5, "Fatais": 2, "CondicoesClimaticas": "Chuva"},
    {"ID": 8, "Data": "2024-12-21", "Horario": "10:10", "DiaSemana": "Domingo", "Bairro": "Centro", "Causa": "Direção Distraída", "Gravidade": "Leve", "NumVeiculos": 2, "Feridos": 1, "Fatais": 0, "CondicoesClimaticas": "Ensolarado"},
    {"ID": 9, "Data": "2024-12-21", "Horario": "22:50", "DiaSemana": "Domingo", "Bairro": "Jardim das Flores", "Causa": "Alta Velocidade", "Gravidade": "Grave", "NumVeiculos": 2, "Feridos": 4, "Fatais": 1, "CondicoesClimaticas": "Ensolarado"},
    {"ID": 10, "Data": "2024-12-22", "Horario": "16:00", "DiaSemana": "Segunda-feira", "Bairro": "Industrial", "Causa": "Falha Mecânica", "Gravidade": "Moderada", "NumVeiculos": 1, "Feridos": 2, "Fatais": 0, "CondicoesClimaticas": "Nublado"}
]

# Criar DataFrame
df = pd.DataFrame(dados_acidentes)

# Melhorar visualização com seaborn
sns.set_theme(style="whitegrid")

# 1. Gráfico: Acidentes por dia da semana
plt.figure(figsize=(10, 6))
ax = sns.countplot(data=df, x="DiaSemana", order=["Segunda-feira", "Terça-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "Sábado", "Domingo"], palette="Blues_d")
plt.title("Acidentes por Dia da Semana", fontsize=16)
plt.xlabel("Dia da Semana", fontsize=12)
plt.ylabel("Quantidade de Acidentes", fontsize=12)
plt.xticks(rotation=45)

# Adicionar anotações
for p in ax.patches:
    ax.annotate(f'{int(p.get_height())}', (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='center', fontsize=10, color='black', xytext=(0, 5),
                textcoords='offset points')

plt.show()

# 2. Gráfico: Gravidade dos acidentes por dia da semana
plt.figure(figsize=(12, 8))
sns.countplot(data=df, x="DiaSemana", hue="Gravidade", palette="muted", order=["Segunda-feira", "Terça-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "Sábado", "Domingo"])
plt.title("Gravidade dos Acidentes por Dia da Semana", fontsize=16)
plt.xlabel("Dia da Semana", fontsize=12)
plt.ylabel("Quantidade de Acidentes", fontsize=12)
plt.xticks(rotation=45)
plt.legend(title="Gravidade", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

# 3. Gráfico: Acidentes por bairro
plt.figure(figsize=(10, 6))
ax = sns.countplot(data=df, x="Bairro", order=df["Bairro"].value_counts().index, palette="viridis")
plt.title("Bairros com Mais Acidentes", fontsize=16)
plt.xlabel("Bairro", fontsize=12)
plt.ylabel("Quantidade de Acidentes", fontsize=12)
plt.xticks(rotation=45)

# Destacar o bairro com mais acidentes
for p in ax.patches:
    if p.get_height() == df["Bairro"].value_counts().max():
        p.set_color('red')

plt.show()

# 4. Gráfico: Causas dos acidentes
plt.figure(figsize=(10, 6))
ax = sns.countplot(data=df, y="Causa", order=df["Causa"].value_counts().index, palette="coolwarm")
plt.title("Causas dos Acidentes", fontsize=16)
plt.xlabel("Quantidade de Acidentes", fontsize=12)
plt.ylabel("Causa", fontsize=12)

# Adicionar anotações
for p in ax.patches:
    ax.annotate(f'{int(p.get_width())}', (p.get_width(), p.get_y() + p.get_height() / 2.),
                ha='left', va='center', fontsize=10, color='black', xytext=(5, 0),
                textcoords='offset points')

plt.show()

# 5. Gráfico: Acidentes por condições climáticas
plt.figure(figsize=(10, 6))
sns.countplot(data=df, x="CondicoesClimaticas", order=df["CondicoesClimaticas"].value_counts().index, palette="Set2")
plt.title("Acidentes por Condições Climáticas", fontsize=16)
plt.xlabel("Condições Climáticas", fontsize=12)
plt.ylabel("Quantidade de Acidentes", fontsize=12)
plt.xticks(rotation=45)
plt.show()

# 6. Gráfico: Relação entre número de veículos e gravidade
plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x="Gravidade", y="NumVeiculos", palette="pastel")
plt.title("Relação entre Gravidade e Número de Veículos Envolvidos", fontsize=16)
plt.xlabel("Gravidade", fontsize=12)
plt.ylabel("Número de Veículos", fontsize=12)
plt.show()

# 7. Gráfico: Acidentes por faixa de horário
# Converter horário para formato numérico
df['Horario'] = pd.to_datetime(df['Horario'], format='%H:%M').dt.hour

# Criar faixas de horário
df['FaixaHorario'] = pd.cut(df['Horario'], bins=[0, 6, 12, 18, 24], labels=['Madrugada (0-6h)', 'Manhã (6-12h)', 'Tarde (12-18h)', 'Noite (18-24h)'])

# Gráfico de acidentes por faixa de horário
plt.figure(figsize=(10, 6))
sns.countplot(data=df, x="FaixaHorario", order=df["FaixaHorario"].value_counts().index, palette="magma")
plt.title("Acidentes por Faixa de Horário", fontsize=16)
plt.xlabel("Faixa de Horário", fontsize=12)
plt.ylabel("Quantidade de Acidentes", fontsize=12)
plt.show()